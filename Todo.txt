* Goal
.. Given a bunch of 'x' jars
.. Load all the jars from the repository
. , Add error handling, if the number of repoitories you get is not the number that you're expecting
.. Split the jars into groups
. , Maximum, 15 groups, Minimum 2 groups
. , Minimum 5 players per group, Maximum 10 players per group
. , 150 people maximum, 10 people minimum
. , For each value 'g' between 2..15, if 5 <= x/g <= 10 then choose 'g' groups
. , Allocate the jars sequentially into the groups,
.  . Distribute x`mod` g, among the existing groups
.. For each group:
. , Create a battle with all the elements of the group
. , Print the battle information
.  . Show a screen with all of the people competing in the battle
. , Start the battle
. , Create an entry in a logger keeping the results for each bot
. , Add the winner to a list
.. Once all the groups have been created
. , Create a new battle with the winner
. , Run the battle
. , Create a victory screen with the winners name
.. Figure out how to log to the database
* Solution:
.. Augment robotspecification with player id
. , check the robotspecification class to see if it has an id
. , If not, create your own Player class that extends it with an id.
.. In the runBattle function log to the database
. , Create a database
.  . Open up the mysql console 
.  . Create a table Player
.   , Player id, name, class name, other details in robot specification
.  . Create a table Battle
.   , Player id, battle id, battle stats of that player - see what components you have inside 'RobotResults'
. , Create a test class that connects to the database
. , Give every battle an id
.  . Initialize the battle
. , Give the round results the player id (team id)
. , Look at the schema for the database
.  . Everytime you run a battle and get the results update all of the databases
.   , battle info
.    . battleid
.    . playerid
.    . rank
.   , roundinfo
.    . battleid
.    . roundid
.    . playerid
.    . energyleft
.    . ramDamage
.    . gunDamage
.. Implement the scoring function
. , Create a new listener,
.  . Listens to every turn
.   , Updates the score snapshot
.   , When the round is over it appends the score snapshot somewhere
.   , When the battle is over, it takes the score information from all of the rounds and calculates the score from them
. , Find vlads email
. , Implement the scoring function as described therein
. , List<List<RoundResult>>
.  . For each round we add a List<RoundResult>
.   , For each robot, there is a round result
. , On Round Ended
.  . Add the current List<IScoreSnapshot> to the list of roundResults
. , On Turn Ended
.  . Update the List<IScoreSnapshot> with the latest IScoreSnapshots
. , getRoundResults:
.  . convert the (IScoreSnapshot) to a RoundResult
. , getCumulativeResult
.  . For cumulativeResults 
.. Check that the team names of jars are distinct
. , Once you load the jars, check that all the team ids are distinct
.  . If they aren't then quit with an error saying that team names are not distinct
.  . Tell David that the team names have to be distinct.
.. Test everything
. , Unit test stuff, you tend to make really stupid mistakes very often
.. Display the winner on the screen
. , Get the battle results of the latest battle id, extract the winner from there
.. put everything in the com.thg namespace, or whatever namespace they want it in

.. Compilation Instruction:
. , java -cp ".;../../../Downloads/mysql-connector-java-5.1.39/mysql-connector-java-5.1.39/mysql-connector-java-5.1.39-bin.jar" DBConnect
* Problems:
.. The way we give player Ids is wrong
. , They are distinct only within a battle
. , We need a way of getting a player Identifier - 
.  . Whatever solution you come up with note that there will be two rounds so
.  . playerids assigned in the first round will require you to have them present in 
.  . the second round as well.
.. Doesnt wait in between rounds
.. When setting up the code remember that you will need to be able to connect to the database
.. You will also have to download the mysql jdbc driver
.. You will also have to set up the classpath for the variables
.. You might also have to change the urls in THGEngine for connecting to the database
.. You also need to fill the players information before you set up
* Fixed Problems:
.. Failing to log to the database
.. The second round weirdly had only two robots
.. The winners are getting returned as null
. , This is most likely because the players are not getting added properly into the map
. , Diagnose by checking out extractWinner
