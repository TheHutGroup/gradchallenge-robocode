* Goal
.. Given a bunch of 'x' jars
.. Load all the jars from the repository
. , Add error handling, if the number of repoitories you get is not the number that you're expecting
.. Split the jars into groups
. , Maximum, 15 groups, Minimum 2 groups
. , Minimum 5 players per group, Maximum 10 players per group
. , 150 people maximum, 10 people minimum
. , For each value 'g' between 2..15, if 5 <= x/g <= 10 then choose 'g' groups
. , Allocate the jars sequentially into the groups,
.  . Distribute x`mod` g, among the existing groups
.. For each group:
. , Create a battle with all the elements of the group
. , Print the battle information
.  . Show a screen with all of the people competing in the battle
. , Start the battle
. , Create an entry in a logger keeping the results for each bot
. , Add the winner to a list
.. Once all the groups have been created
. , Create a new battle with the winner
. , Run the battle
. , Create a victory screen with the winners name
.. Figure out how to log to the database
* Solution:
.. Implement the functions
. , mapToSpecs
. , bracket
.  . Take parameters for min, max {groups/players}
. , mapToBattle
. , toBattle
.. Add the import of the specific robocode package
.. Given 'x' jars
.. Map the jars to robot specifications
.. Split the specs into groups
.. Map each group to a battle
.. Run all the battles and collect the winners
. , Submit them to a robocode engine
. , Attach a listener to the robocode engine
. , The listener populates a map from battle number to battle results
. , Take the battle results and calculate the winner from it.
.. Display a screen consisting of the winner information
.. Create a battle of the winners
.. Run a battle of the winners
.. Display the winner on the screen
. , Get the battle results of the latest battle id, extract the winner from there
.. put everything in the com.thg namespace, or whatever namespace they want it in
