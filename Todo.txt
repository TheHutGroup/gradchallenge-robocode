* Goal
.. Given a bunch of 'x' jars
.. Load all the jars from the repository
. , Add error handling, if the number of repoitories you get is not the number that you're expecting
.. Split the jars into groups
. , Maximum, 15 groups, Minimum 2 groups
. , Minimum 5 players per group, Maximum 10 players per group
. , 150 people maximum, 10 people minimum
. , For each value 'g' between 2..15, if 5 <= x/g <= 10 then choose 'g' groups
. , Allocate the jars sequentially into the groups,
.  . Distribute x`mod` g, among the existing groups
.. For each group:
. , Create a battle with all the elements of the group
. , Print the battle information
.  . Show a screen with all of the people competing in the battle
. , Start the battle
. , Create an entry in a logger keeping the results for each bot
. , Add the winner to a list
.. Once all the groups have been created
. , Create a new battle with the winner
. , Run the battle
. , Create a victory screen with the winners name
.. Figure out how to log to the database
* Solution:
.. Implement the scoring function
. , Create a new listener,
.  . Listens to every turn
.   , Updates the score snapshot
.   , When the round is over it appends the score snapshot somewhere
.   , When the battle is over, it takes the score information from all of the rounds and calculates the score from them
. , Find vlads email
. , Implement the scoring function as described therein
. , List<List<RoundResult>>
.  . For each round we add a List<RoundResult>
.   , For each robot, there is a round result
. , On Round Ended
.  . Add the current List<IScoreSnapshot> to the list of roundResults
. , On Turn Ended
.  . Update the List<IScoreSnapshot> with the latest IScoreSnapshots
. , getRoundResults:
.  . convert the (IScoreSnapshot) to a RoundResult
. , getCumulativeResult
.  . For cumulativeResults 
.. Augment robotspecification with player id
. , check the robotspecification class to see if it has an id
. , If not, create your own Player class that extends it with an id.
.. In the runBattle function log to the database
. , Create a database
.  . Open up the mysql console 
.  . Create a table Player
.   , Player id, name, class name, other details in robot specification
.  . Create a table Battle
.   , Player id, battle id, battle stats of that player - see what components you have inside 'RobotResults'
. , Create a test class that connects to the database
.. Display a screen consisting of the winner information
.. Create a battle of the winners
.. Run a battle of the winners
.. Display the winner on the screen
. , Get the battle results of the latest battle id, extract the winner from there
.. put everything in the com.thg namespace, or whatever namespace they want it in
